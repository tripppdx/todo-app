{"version":3,"sources":["hooks/form.js","context/settings/context.js","components/todo/todo.js","app.js","index.js"],"names":["useForm","callback","useState","values","setValues","handleChange","event","persist","console","log","target","name","value","handleSubmit","preventDefault","SettingsContext","React","createContext","Settings","props","hide","setHide","numItems","setNumItems","sort","setSort","Provider","children","ToDo","require","list","setList","incomplete","setIncomplete","item","id","uuid","complete","settings","useContext","startIdx","setStartIdx","endIdx","setEndIdx","useEffect","incompleteCount","filter","length","onSubmit","onChange","type","placeholder","defaultValue","min","max","data","slice","pagination","map","idx","interactive","elevation","Elevation","TWO","text","assignee","onClick","items","toggleComplete","toString","App","Component","Main","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.4934cfca.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useForm = callback => {\n  const [values, setValues] = useState({});\n\n  const handleSubmit = event => {\n    // console.log('EVENT', event.target.name);\n    event.preventDefault();\n\n    callback(values);\n  };\n\n  const handleChange = event => {\n    event.persist();\n    console.log('CHANGE', event.target.name);\n    setValues(values => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;\n","import React, { useState } from 'react';\n\nexport const SettingsContext = React.createContext();\n\nfunction Settings(props) {\n  let [hide, setHide] = useState(false);\n  let [numItems, setNumItems] = useState(3);\n  let [sort, setSort] = useState('');\n\n  return (\n    <SettingsContext.Provider\n      value={{ hide, numItems, sort, setHide, setNumItems, setSort }}\n    >\n      {props.children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport default Settings;\n","import React, { useEffect, useState, useContext } from 'react';\nimport useForm from '../../hooks/form.js';\n\nimport { v4 as uuid } from 'uuid';\nimport { Button, Label, Switch, Card, Elevation } from '@blueprintjs/core';\nimport { SettingsContext } from '../../context/settings/context';\n\nconst crypto = require('crypto');\n\nconst ToDo = () => {\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem);\n\n  const settings = useContext(SettingsContext);\n  const [startIdx, setStartIdx] = useState(0);\n  const [endIdx, setEndIdx] = useState(settings.numItems);\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter(item => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = list.map(item => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n      return item;\n    });\n    setList(items);\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete);\n    setIncomplete(incompleteCount);\n    // document.title = `To Do List: ${incomplete.length}`;\n  }, [list]);\n\n  function handleHide() {\n    settings.setHide(!settings.hide);\n  }\n\n  function pagination() {\n    let data = incomplete.slice(startIdx, endIdx);\n    console.log(incomplete);\n    console.log(data, startIdx, endIdx);\n    return data;\n  }\n\n  function handleNext() {\n    if (endIdx <= incomplete.length) {\n      setStartIdx(startIdx + settings.numItems);\n      setEndIdx(endIdx + settings.numItems);\n    }\n  }\n\n  function handlePrevious() {\n    if (startIdx > 0) {\n      setStartIdx(startIdx - settings.numItems);\n      setEndIdx(endIdx - settings.numItems);\n    }\n  }\n\n  useEffect(() => {\n    setStartIdx(0);\n    setEndIdx(settings.numItems);\n  }, [settings.numItems]);\n\n  return (\n    <>\n      <header>\n        <h1>To Do List: {incomplete.length} items pending</h1>\n      </header>\n\n      <form onSubmit={handleSubmit}>\n        <h2>Add To Do Item</h2>\n\n        <Label>\n          <span>To Do Item</span>\n          <input\n            onChange={handleChange}\n            name=\"text\"\n            type=\"text\"\n            placeholder=\"Item Details\"\n          />\n        </Label>\n\n        <Label>\n          <span>Assigned To</span>\n          <input\n            onChange={handleChange}\n            name=\"assignee\"\n            type=\"text\"\n            placeholder=\"Assignee Name\"\n          />\n        </Label>\n\n        <Label>\n          <span>Difficulty</span>\n          <input\n            onChange={handleChange}\n            defaultValue={3}\n            type=\"range\"\n            min={1}\n            max={5}\n            name=\"difficulty\"\n          />\n        </Label>\n\n        <Label>\n          <Button type=\"submit\">Add Item</Button>\n        </Label>\n\n        <Label>\n          <Switch onChange={handleHide}> Hide Completed Tasks </Switch>\n        </Label>\n      </form>\n\n      {pagination().map((item, idx) => (\n        <Card interactive={true} elevation={Elevation.TWO} key={uuid()}>\n          {settings.hide === false || item.complete === false ? (\n            <>\n              <p>{item.text}</p>\n              <p>\n                <small>Assigned to: {item.assignee}</small>\n              </p>\n              <p>{/* <small>Difficulty: {item.difficulty}</small> */}</p>\n              <div onClick={() => toggleComplete(item.id)}>\n                Complete: {item.complete.toString()}\n              </div>\n              <hr />\n            </>\n          ) : null}\n        </Card>\n      ))}\n      <Button onClick={handlePrevious}>Previous</Button>\n      <Button onClick={handleNext}>NEXT</Button>\n    </>\n  );\n};\n\nexport default ToDo;\n","import React from 'react';\n\nimport ToDo from './components/todo/todo.js';\nimport Settings from './context/settings/context';\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Settings>\n        <ToDo />\n      </Settings>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}